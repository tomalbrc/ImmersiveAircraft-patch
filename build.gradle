plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version "8.1.1"
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

configurations {
    shade
}

loom {
    accessWidenerPath = file("src/main/resources/immersiveaircraft-patch.accesswidener")
}

repositories {
    maven { url "https://api.modrinth.com/maven/" }
    maven { url 'https://maven.nucleoid.xyz' }
    maven { url "https://maven.tomalbrc.de/" }
    maven {
        url "https://maven.theepicblock.nl"
        content { includeGroup("nl.theepicblock") }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation include("de.tomalbrc:blockbench-import-library:${project.bil_version}")
    modImplementation include("eu.pb4:sgui:${project.sgui_version}")

    modImplementation ("eu.pb4:polymer-resource-pack:${project.polymer_version}")
    modImplementation ("eu.pb4:polymer-core:${project.polymer_version}")
    modImplementation ("eu.pb4:polymer-virtual-entity:${project.polymer_version}")
    modImplementation ("eu.pb4:polymer-autohost:${project.polymer_version}")

    modImplementation("maven.modrinth:immersive-aircraft:3hpofkRO")

    implementation shade("org.mariuszgromada.math:MathParser.org-mXparser:5.2.1")

    modImplementation("nl.theepicblock:PolyMc:5.4.0+1.20") {
        exclude(group: "org.quiltmc", module: "quilt-loader")
    }
}

shadowJar {
    configurations = [project.configurations.shade]
    archiveClassifier.set("shadow")
}

remapJar {
    dependsOn(shadowJar)
    input.set(shadowJar.archivePath)
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                classifier "sources"
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        mavenLocal()
    }
}